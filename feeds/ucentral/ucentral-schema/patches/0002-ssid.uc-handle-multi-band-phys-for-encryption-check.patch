From 6944842491c624651ec8294300f68f9a5e97c0c1 Mon Sep 17 00:00:00 2001
From: Jonas Gorski <jonas.gorski@bisdn.de>
Date: Wed, 28 Aug 2024 14:57:33 +0000
Subject: [PATCH 2/3] ssid.uc: handle multi-band phys for encryption check

Do not validate encryption against bands supported by the phy, but
against the band in use by getting the cross-section of ssid bands and
phy bands.

Fixes no default wireless configuration being generated if the phy is
both 2G or 5G and 6G capable.

Signed-off-by: Jonas Gorski <jonas.gorski@bisdn.de>
---
 renderer/templates/interface/ssid.uc | 33 ++++++++++++++++++----------
 1 file changed, 21 insertions(+), 12 deletions(-)

--- a/renderer/templates/interface/ssid.uc
+++ b/renderer/templates/interface/ssid.uc
@@ -117,10 +117,9 @@
 		return false;
 	}
 
-	function validate_encryption(phy) {
-		if ('6G' in phy.band && !(ssid?.encryption.proto in [ "wpa3", "wpa3-mixed", "wpa3-192", "sae", "sae-mixed", "owe" ])) {
-			warn("Invalid encryption settings for 6G band");
-			return null;
+	function validate_encryption(band) {
+		if ("6G" == band && !(ssid?.encryption.proto in [ "wpa3", "wpa3-mixed", "wpa3-192", "sae", "sae-mixed", "owe" ])) {
+			warn("Invalid encryption settings for 6G band ");
 		}
 
 		if (!ssid.encryption || ssid.encryption.proto in [ "none" ]) {
@@ -183,8 +182,8 @@
 		warn("Can't find any valid encryption settings");
 	}
 
-	function match_ieee80211w(phy) {
-		if ('6G' in phy.band)
+	function match_ieee80211w(band) {
+		if ("6G" == band)
 			return 2;
 
 		if (!ssid.encryption || ssid.encryption.proto in [ "none" ])
@@ -199,8 +198,8 @@
 		return index([ "disabled", "optional", "required" ], ssid.encryption.ieee80211w);
 	}
 
-	function match_sae_pwe(phy) {
-		if ('6G' in phy.band)
+	function match_sae_pwe(band) {
+		if ('6G' in band)
 			return 1;
 		return '';
 	}
@@ -277,6 +276,14 @@
 		return '';
 	}
 
+	function match_band(phy) {
+		for (let band in ssid.wifi_bands) {
+			if (band in phy.band)
+				return band;
+		}
+		return null;
+	}
+
 	let radius_gw_proxy = ssid.services && (index(ssid.services, "radius-gw-proxy") >= 0);
 
 	if ('captive' in ssid.services && !ssid.captive)
@@ -314,7 +321,9 @@
 {%   let ssidname = basename + '_' + n + '_' + count; %}
 {%   let section = (owe ? 'o' : '' ) + ssidname; %}
 {%   let id = wiphy.allocate_ssid_section_id(phy) %}
-{%   let crypto = validate_encryption(phy); %}
+{%   let band = match_band(phy); %}
+{%   if (!band) continue; %}
+{%   let crypto = validate_encryption(band); %}
 {%   let ifname = calculate_ifname(basename) %}
 {%   if (!crypto) continue; %}
 set wireless.{{ section }}=wifi-iface
@@ -357,13 +366,13 @@ set wireless.{{ section }}.disassoc_low_
 set wireless.{{ section }}.auth_cache='{{ b(ssid.encryption?.key_caching) }}'
 {%   endif %}
 
-{% if ('6G' in phy.band): %}
+{% if ("6G" == band): %}
 set wireless.{{ section }}.fils_discovery_max_interval={{ ssid.fils_discovery_interval }}
 {%   endif %}
 
 # Crypto settings
-set wireless.{{ section }}.ieee80211w={{ match_ieee80211w(phy) }}
-set wireless.{{ section }}.sae_pwe={{ match_sae_pwe(phy) }}
+set wireless.{{ section }}.ieee80211w={{ match_ieee80211w(band) }}
+set wireless.{{ section }}.sae_pwe={{ match_sae_pwe(band) }}
 set wireless.{{ section }}.encryption={{ crypto.proto }}
 set wireless.{{ section }}.key={{ s(crypto.key) }}
 
